}
library(boot)
set.seed(1234)
results <- boot(data=mtcars,statistic=bs,R=1000,formula=mpg~wt+disp)
print(results)
plot(results,index=2)
boot.ci(results,type="bca",index=2)
boot.ci(results,type="bca",index=3)
data(Affairs,package="AER")
summary(Affairs)
table(Affairs$affairs)
Affairs$ynaffair <- ifelse(Affairs$affairs > 0,1,0)
Affairs$ynaffair <- factor(Affairs$ynaffair,levels=c(0,1),labels=c("No","Yes"))
table(Affairs$ynaffair)
fit.full <- glm(ynaffair ~ gender + age + yearsmarried + children + religiousness + education + occupation + rating)
Affairs$ynaffair <- ifelse(Affairs$affairs > 0,1,0)
Affairs$ynaffair <- factor(Affairs$ynaffair,levels=c(0,1),labels=c("No","Yes"))
table(Affairs$ynaffair)
fit.full <- glm(ynaffair ~ gender +age + yearsmarried + children + religiousness + education + occupation + rating,data=Affairs,family=binomial())
summary(fit.full)
fit.reduced <- glm(ynaffair ~ age + yearsmarried + religiousness + rating,data=Affairs,family=binomial())
summary(fit.reduced)
anova(fit.reduced,fit.full,test="Chisq")
coef(fit.reduced)
exp(coef(fit.reduced))
testdata <- data.frame(rating=c(1,2,3,4,5),age=mean(Affairs$age),yearsmarried=mean(Affairs$yearsmarried),religiousness=mean(Affairs$religiousness))
testdata
testdata$prob <- predict(fit.reduced,newdata=testdata,type="response")
testdata$prob
testdata$prob <- predict(fit.reduced,newdata=testdata,type="response")
testdata$prob
testdata
testdata <- data.frame(rating=mean(Affairs$rating),age=seq(17,57,10),yearsmarried=mean(Affairs$yearsmarried),religiousness=mean(Affairs$religiousness))
testdata
testdata$prob <- predict(fit.reduced,newdata=testdata,type="response")
testdata
deviance(fit.reduced) / df.residual(fit.reduced)
fit <- glm(ynaffair ~ age + yearsmarried + religiousness + rating,family=binomial(),data=Affairs)
fit.od <- glm(ynaffair ~ age + yearsmarried + religiousness + rating,family = quasibinomial(),data=Affairs)
pchisq(summary(fit.od)$dispersion * fit$df.residual,fit$df.residual,lower=F)
data(epilepsy,package="robustbase")
names(epilepsy)
summary(breslow.dat[6:9])
data(epilepsy,package="robustbase")
names(epilepsy)
summary(epilepsy[6:9])
library(ggplot2)
ggplot(epilepsy,aes(x=Ysum)) +
geom_histogram(color="black",fill="white") +
labs(title="Distribution of seizures",x="Seizure Count",y="Frequency") +
theme_bw()
ggplot(epilepsy,aes(x=Trt,y=Ysum)) +
geom_boxplot() +
labs(title="Group comparisons",x="",y="") +
theme_bw()
fit <- glm(Ysum ~ Base + Age +Trt,data=epilepsy,family=poisson())
summary(fit)
coef(fit)
exp(coef(fit))
library(qcc)
qcc.overdispersion.test(breslow.dat$sumY,type="poisson")
deviance(fit) / df.residual(fit)
library(qcc)
qcc.overdispersion.test(epilepsy$Ysum, type="poisson")
fit.od <- glm(Ysum ~ Base + Age + Trt, data=epilepsy,
family=quasipoisson())
summary(fit.od)
library(psych)
fa.parallel(USJudgeRatings[,-1],fa="pc",n.iter=100,show.legend = FALSE,main="Scree plot with parallel analysis")
abline(h=1)
library(psych)
pc <- principal(USJudgeRatings[,-1],nfactors = 1)
pc
library(psych)
pc <- principal(USJudgeRatings[,-1],nfactors = 1)
pc
library(psych)
fa.parallel(Harman23.cor$cov,n.obs=302,fa="pc",n.iter=100,show.legend = FALSE,main="Scree plot with parallel analysis")
abline(h=1)
library(psych)
pc <- principal(Harman23.cor$cov,nfactors = 2,rotate="none")
pc
rc <- principal(Harman23.cor$cov,nfactors = 2,rotate="varimax")
rc
library(psych)
pc <- principal(USJudgeRatings[,-1],nfactors = 1,score=TRUE)
head(pc$scores)
cor(USJudgeRatings$CONT,pc$score)
library(psych)
rc  <- principal(Harman23.cor$cov,nfactors = 2,rotate="varimax")
round(unclass(rc$weights),2)
options(digits = 2)
covariances <- ability.cov$cov
correlations <- cov2cor(covariances)
correlations
library(psych)
covariances <- ability.cov$cov
correlations <- cov2cor(covariances)
fa.parallel(correlations,n.obs=112,fa="both",n.iter=100,main="Scree plots parallel analysis")
abline(h=c(0,1))
fa <- fa(correlations,nfactors=2,rotate="none",fm="pa")
fa
fa.varimax <- fa(correlations,nfactors=2,rotate="varimax",fm="pa")
fa.varimax
fa.promax <- fa(correlations,nfactors=2,rotate="promax",fm="pa")
fa.promax
fsm <- function(oblique) {
if(class(oblique)[2]=="fa" & is.null(oblique$Phi)) {
warning("Object doesn't look like oblique EFA")
}else{
P <- unclass(oblique$loading)
F <- P %*% oblique$Phi
colnames(F) <- c("PA1","PA2")
return(F)
}
}
fsm(fa.promax)
factor.plot(fa.promax,labels=rownames(fa.promax$loadings))
fa.diagram(fa.promax,simple=FALSE)
fa.promax$weights
library(xts)
sales = c(18, 33, 41,  7, 34, 35, 24, 25, 24, 21, 25, 20,
22, 31, 40, 29, 25, 21, 22, 54, 31, 25, 26, 35)
date = seq(as.Date("2018/1/1"), as.Date("2019/12/1"), by="month")
sales.xts <- xts(sales,date)
library(ggplot2)
library(forecast)
autoplot(scales.xts)
library(xts)
sales = c(18, 33, 41,  7, 34, 35, 24, 25, 24, 21, 25, 20,
22, 31, 40, 29, 25, 21, 22, 54, 31, 25, 26, 35)
date = seq(as.Date("2018/1/1"), as.Date("2019/12/1"), by="month")
sales.xts <- xts(sales,date)
library(ggplot2)
library(forecast)
autoplot(scales.xts)
library(xts)
sales = c(18, 33, 41,  7, 34, 35, 24, 25, 24, 21, 25, 20,
22, 31, 40, 29, 25, 21, 22, 54, 31, 25, 26, 35)
date = seq(as.Date("2018/1/1"), as.Date("2019/12/1"), by="month")
sales.xts <- xts(sales,date)
library(ggplot2)
library(forecast)
autoplot(sales.xts)
library(xts)
sales = c(18, 33, 41,  7, 34, 35, 24, 25, 24, 21, 25, 20,
22, 31, 40, 29, 25, 21, 22, 54, 31, 25, 26, 35)
date = seq(as.Date("2018/1/1"), as.Date("2019/12/1"), by="month")
sales.xts <- xts(sales,date)
library(ggplot2)
library(forecast)
autoplot(sales.xts)
autoplot(sales.xts) +
geom_line(color="blue") +
scale_x_date(date_breaks = "1 months",date_labels = "%b %y") +
labs(x="",y="Scales",title="Customized Time Series Plot") +
theme_bw() +
theme(axis.text.x=element_text(angle=90,vjust=0.5,hjust=1),panel.grid.minor.x = element_blank())
library(forecast)
library(ggplot2)
theme_set(theme_bw())
ylim <- c(min(Nile),max(Nile))
autoplot(Nile) +
ggtitle("Raw time series") +
scale_y_continuous(limits = ylim)
autoplot(ma(Nile,3)) +
ggtitle("Simple Moving Averages (k=3)") +
scale_y_continuous(limits = ylim)
autoplot(ma(Nile,7)) +
ggtitle("Simple Moving Averages (k=7)") +
scale_y_continuous(limits = ylim)
autoplot(ma(Nile,15)) +
ggtitle("Simple Moving Averages (k=15)") +
scale_y_continuous(limits = ylim)
library(forecast)
library(ggplot2)
autoplot(AirPassengers)
lAirPassengers <- log(AirPassengers)
autoplot(lAirPassengers,ylab="log(AirPassengers)")
fit <- stl(lAirPassengers,s.window = "period")
autoplot(fit)
fit$time.series
library(forecast)
library(ggplot2)
library(directlabels)
ggmonthplot(AirPassengers) +
labs(title="Month plot: AirPassengers",x="",y="Passengers (thousands)")
p <- ggseasonplot(AirPassengers) + geom_point() +
labs(title="Seasonal plot: AirPassengers",x="",y="Passengers (thousands)")
direct.label(p)
library(forecast)
fit <- ets(nhtemp,model="ANN")
fit
forecast(fit,1)
autoplot(forecast(fit,1)) + labs(x="Year",y=expression(paste("Temperature (",degree*F,")",)),title="New Haven Annual Mean Temperatures")
accuracy(fit)
library(forecast)
fit <- ets(nhtemp,model="ANN")
fit
forecast(fit,1)
autoplot(forecast(fit,1)) + labs(x="Year",y=expression(paste("Temperature (",degree*F,")",)),title="New Haven Annual Mean Temperatures")
accuracy(fit)
library(forecast)
fit <- ets(log(AirPassengers),model="AAA")
fit
accuracy(fit)
pred <- forecast(fit,5)
pred
autoplot(pred) +
labs(title="Forecast for Air Travel",y="Log(AirPassengers)",x="Time")
pred$mean <- exp(pred$mean)
pred$lower <- exp(pred$lower)
pred$upper <- exp(pred$upper)
p <- cbind(pred$mean,pred$lower,pred$upper)
dimnames(p)[[2]] <- c("mean","Lo 80","Lo 95","Hi 80","Hi 95")
p
library(forecast)
fit <- ets(JohnsonJohnson)
fit
autoplot(forecast(fit)) +
labs(x="time", y="Quarterly Earnings (Dollars)",title="Johnson and Johnson Forecasts")
library(forecast)
library(tseries)
autoplot(Nile)
ndiffs(Nile)
dNile <- diff(Nile)
autoplot(dNile)
adf.test(dNile)
autoplot(Acf(dNile))
autoplot(Pacf(dNile))
library(forecast)
fit <- arima(Nile,order=c(0,1,1))
fit
accuracy(fit)
library(ggplot2)
df <- data.frame(resid = as.numeric(fit$residuals))
ggplot(df,aes(sample=resid)) +
stat_qq() + stat_qq_line() +
labs(title="Normal Q-Q Plot")
Box.test(fit$residuals,type="Ljung-Box")
df <- data.frame(resid = as.numeric(fit$residuals))
df
forecast(fit,3)
autoplot(forecast(fit,3)) + labs(x="Year",y="Annual Flow")
library(forecast)
fit <- auto.arima(sunspots)
fit
forecast(fit,3)
accuracy(fit)
library(forecast)
fit <- auto.arima(sunspots)
fit
forecast(fit,3)
accuracy(fit)
data(nutrient,package="flexclust")
head(nutrient,4)
d <- dist(nutrient)
as.matrix(d)[1:4,1:4]
data(nutrient,package="flexclust")
row.names(nutrient) <- tolower(row.names(nutrient))
nutrient.scaled <- scale(nutrient)
d <- dist(nutrient.scaled)
fit.average <- hclust(d,method="average")
library(ggplot2)
library(ggdendro)
ggdedgrogram(fit.average) + labs(title="Average Linkage Clustering")
data(nutrient,package="flexclust")
row.names(nutrient) <- tolower(row.names(nutrient))
nutrient.scaled <- scale(nutrient)
d <- dist(nutrient.scaled)
fit.average <- hclust(d,method="average")
library(ggplot2)
library(ggdendro)
ggdendrogram(fit.average) + labs(title="Average Linkage Clustering")
data(nutrient, package="flexclust")
row.names(nutrient) <- tolower(row.names(nutrient))
nutrient.scaled <- as.data.frame(scale(nutrient))
d <- dist(nutrient.scaled)
fit.average <- hclust(d, method="average")
library(ggdendro)
library(ggplot2)
ggdendrogram(fit.average) +
labs(title="Average Linkage Clustering")
library(NbClust)
library(factoextra)
nc <- NbClust(nutrient.scaled,distance = "euclidean",min.nc=2,max.nc=15,method="average")
fviz_nbclust(nc)
clusters <- cutree(fit.average,k=5)
table(clusters)
nutrient.scaled$clusters <- clusters
library(dplyr)
profiles <- nutrient.scaled %>%
group_by(clusters) %>%
summarize_all(median)
profiles %>% round(3) %>% data.frame()
library(colorhcplot)
cl <- factor(clusters,levels=c(1:5),labels=paste("cluster",1:5))
colorhcplot(fit.average,cl,hang=-1,lab.cex=.8,,lwd=2,main="Average-Linkage Clustering\n5 Cluster Solution")
clusters <- cutree(fit.average,k=5)
table(clusters)
nutrient.scaled$clusters <- clusters
library(dplyr)
profiles <- nutrient.scaled %>%
group_by(clusters) %>%
summarize_all(median)
profiles %>% round(3) %>% data.frame()
library(colorhcplot)
cl <- factor(clusters,levels=c(1:5),labels=paste("cluster",1:5))
colorhcplot(fit.average,cl,hang=-1,lab.cex=.8,,lwd=2,main="Average-Linkage Clustering\n5 Cluster Solution")
wssplot <- function(data,nc=15,seed=1234) {
require(ggplot2)
wss <- numeric(nc)
for (i in 1:nc){
set.seed(seed)
wss[i] <- sum(kmeans(data,centers=i)$withinss)
}
results <- data.frame(cluster=1:nc,wss=wss)
ggplot(results,aes(x=cluster,y=wss)) +
geom_point(color="steelblue",size=2) +
geom_line(color="grey") +
theme_bw() +
labs(x="Number of Clusters",y="within groups sum of squares")
}
data(wine,package="rattle")
library(NbClust)
library(factoextra)
head(wine)
wssplot <- function(data,nc=15,seed=1234) {
require(ggplot2)
wss <- numeric(nc)
for (i in 1:nc){
set.seed(seed)
wss[i] <- sum(kmeans(data,centers=i)$withinss)
}
results <- data.frame(cluster=1:nc,wss=wss)
ggplot(results,aes(x=cluster,y=wss)) +
geom_point(color="steelblue",size=2) +
geom_line(color="grey") +
theme_bw() +
labs(x="Number of Clusters",y="within groups sum of squares")
}
data(wine,package="rattle")
library(NbClust)
library(factoextra)
head(wine)
df <- scale(wine[-1])
head(df)
wssplot(df)
set.seed(1234)
nc <- NbClust(df,min.nc = 2,max.nc = 15,method="kmeans")
fviz_nbclust(nc)
library(ggplot2)
library(tidyr)
means <- as.data.frame(fit.km$centers)
data(wine,package="rattle")
library(NbClust)
library(factoextra)
head(wine)
df <- scale(wine[-1])
head(df)
wssplot(df)
set.seed(1234)
nc <- NbClust(df,min.nc = 2,max.nc = 15,method="kmeans")
fviz_nbclust(nc)
library(ggplot2)
library(tidyr)
means <- as.data.frame(fit.km$centers)
data(wine,package="rattle")
library(NbClust)
library(factoextra)
head(wine)
df <- scale(wine[-1])
head(df)
wssplot(df)
set.seed(1234)
nc <- NbClust(df,min.nc = 2,max.nc = 15,method="kmeans")
fviz_nbclust(nc)
library(ggplot2)
library(tidyr)
means <- as.data.frame(fit.km$centers)
data(wine,package="rattle")
library(NbClust)
library(factoextra)
head(wine)
df <- scale(wine[-1])
head(df)
wssplot(df)
set.seed(1234)
nc <- NbClust(df,min.nc = 2,max.nc = 15,method="Kmeans")
install.packages("rattle")
data(wine,package="rattle")
library(NbClust)
library(factoextra)
head(wine)
df <- scale(wine[-1])
head(df)
wssplot(df)
set.seed(1234)
nc <- NbClust(df,min.nc = 2,max.nc = 15,method="Kmeans")
data(wine,package="rattle")
library(NbClust)
library(factoextra)
head(wine)
df <- scale(wine[-1])
head(df)
wssplot(df)
set.seed(1234)
nc <- NbClust(df,min.nc = 2,max.nc = 15,method="Kmeans")
wssplot(df)
set.seed(1234)
nc <- NbClust(df,min.nc = 2,max.nc = 15,method="kmeans")
fviz_nbclust(nc)
fit.km$centers
wssplot(df)
set.seed(1234)
nc <- NbClust(df,min.nc = 2,max.nc = 15,method="kmeans")
fviz_nbclust(nc)
data(wine, package="rattle")
library(NbClust)
library(factoextra)
head(wine)
df <- scale(wine[-1])
head(df)
wssplot(df)
set.seed(1234)
nc <- NbClust(df, min.nc=2, max.nc=15, method="kmeans")
fviz_nbclust(nc)
wssplot <- function(data, nc=15, seed=1234){
require(ggplot2)
wss <- numeric(nc)
for (i in 1:nc){
set.seed(seed)
wss[i] <- sum(kmeans(data, centers=i)$withinss)
}
results <- data.frame(cluster=1:nc, wss=wss)
ggplot(results, aes(x=cluster,y=wss)) +
geom_line(color="grey") +
geom_point(color="steelblue", size=2) +
theme_bw() +
labs(x="Number of Clusters",
y="Within groups sum of squares")
}
data(wine, package="rattle")
library(NbClust)
library(factoextra)
head(wine)
df <- scale(wine[-1])
head(df)
wssplot(df)
set.seed(1234)
nc <- NbClust(df, min.nc=2, max.nc=15, method="kmeans")
fviz_nbclust(nc)
library(factoextra)
fviz_cluster(fit.km,data=df)
library(factoextra)
fviz_cluster(fit.km,data=df)
fit.km <- kmeans(df, 3, nstart=24)
library(factoextra)
fviz_cluster(fit.km,data=df)
ct.km <- table(wine$Type,fit.km$cluster)
ct.km
library(flexclust)
randIndex(ct.km)
library(cluster)
set.seed(1234)
fit.pam <- pam(wine[-1],k=3,stand=TRUE)
fit.pam$medoids
ct.pam <- table(wine$Type,fit.pam$clustering)
ct.pam <- table(wine$Type,fit.pam$clustering)
ct.pam
ct.pam <- table(wine$Type,fit.pam$clustering)
ct.pam
randIndex(ct.pam)
library(fMultivar)
library(ggplot2)
set.seed(1234)
df <- rnorm2d(1000,rho=.5)
df <- as.data.frame(df)
ggplot(df,aes(x=V1,y=V2)) +
geom_point(alpha=.3) + theme_minimal() +
labs(title="Bivariate Normal Distribution with rho=0.5")
wssplot(df)
library(NbClust)
library(factoextra)
nc <- NbClust(df,min.nc = 2,max.nc = 15,method="kmeans")
fviz_nbclust(nc)
library(ggplot2)
fit <- kmeans(df,2)
df$cluster <- factor(fit$cluster)
ggplot(data=df,aes(x=V1,y=V2,color=cluster,shape=cluster)) +
theme_minimal() +
geom_point(alpha=.5) +
ggtitle("Clustering of Bivariate Normal Data"
library(clusterability)
library(ggplot2)
fit <- kmeans(df,2)
df$cluster <- factor(fit$cluster)
ggplot(data=df,aes(x=V1,y=V2,color=cluster,shape=cluster)) +
theme_minimal() +
geom_point(alpha=.5) +
ggtitle("Clustering of Bivariate Normal Data")
library(clusterability)
dipdist <- clusterabilitytest(df[-3], test="dip")
dipdist
CCC = nc$All.index[, 4]
k <- length(CCC)
plotdata <- data.frame(CCC = CCC, k = seq_len(k))
ggplot(plotdata, aes(x=k, y=CCC)) +
geom_point() + geom_line() +
theme_minimal() +
scale_x_continuous(breaks=seq_len(k)) +
labs(x="Number of Clusters")
